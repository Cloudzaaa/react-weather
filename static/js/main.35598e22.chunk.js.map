{"version":3,"sources":["WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","zip","props","URL","concat","fetch","then","res","json","setState","react_default","a","createElement","weather","iconUrl","icon","main","name","src","alt","description","temp","temp_max","temp_min","wind","speed","Component","PLACES","headerStyle","color","App","activePlace","Container","Navbar","className","Brand","style","Row","Col","md","sm","Nav","variant","stacked","activeKey","onSelect","index","map","place","Link","key","eventKey","src_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35598e22.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass WeatherDisplay extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            weatherData: null,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const zip = this.props.zip;\r\n        const URL = `https://api.openweathermap.org/data/2.5/weather?q=${zip}&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial`;\r\n        fetch(URL).then(res => res.json()).then(json => {\r\n            this.setState({weatherData: json});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const weatherData = this.state.weatherData;\r\n        if (!weatherData) return <div>Loading</div>;\r\n        const weather = weatherData.weather[0];\r\n        const iconUrl = `https://openweathermap.org/img/w/${weather.icon}.png`;\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    {weather.main} in {weatherData.name}\r\n                    <img src={iconUrl} alt={weatherData.description}/>\r\n                </h1>\r\n                <p>Current: {weatherData.main.temp}°</p>\r\n                <p>High: {weatherData.main.temp_max}°</p>\r\n                <p>Low: {weatherData.main.temp_min}°</p>\r\n                <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDisplay;\r\n","import React, { Component } from 'react';\r\nimport WeatherDisplay from './WeatherDisplay';\r\nimport 'bootswatch/dist/solar/bootstrap.css';\r\nimport { Navbar, Nav, Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst PLACES = [\r\n    { name: \"Mexico City\", zip: \"94303\" },\r\n    { name: \"Sunnyvale\", zip: \"94088\" },\r\n    { name: \"Santa Cruz\", zip: \"95062\" },\r\n    { name: \"Honolulu\", zip: \"96803\" }\r\n];\r\n\r\nconst headerStyle = {\r\n    color: '#839496',\r\n};\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          activePlace: 0,\r\n        };\r\n    }\r\n    render() {\r\n        const activePlace = this.state.activePlace;\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Navbar className=\"justify-content-center\">\r\n                        <Navbar.Brand style={headerStyle}>\r\n                            React Simple Weather App\r\n                        </Navbar.Brand>\r\n                    </Navbar>\r\n\r\n                    <Row>\r\n                        <Col md={4} sm={4}>\r\n                            <h3>Select a city</h3>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column\"\r\n                                stacked\r\n                                activeKey={activePlace}\r\n                                onSelect={index => {\r\n                                    this.setState({ activePlace: index });\r\n                                }}\r\n                            >\r\n                                {PLACES.map((place, index) => (\r\n                                    <Nav.Link key={index} eventKey={index}>{place.name}</Nav.Link>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        <Col md={8} sm={8}>\r\n                            <WeatherDisplay key={activePlace} zip={PLACES[activePlace].zip} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}